LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

-- 实体定义：song
-- 用于根据当前乐曲编号 (music_num) 输出相应的音符信号 (tone2)
ENTITY song IS
	PORT (
		clk8hz : IN STD_LOGIC; -- 输入 8Hz 时钟信号
		tone2 : OUT INTEGER RANGE 0 TO 10; -- 输出音符信号
		music_num : IN INTEGER RANGE 0 TO 2 := 0 -- 当前乐曲编号 (默认为 0)
	);
END ENTITY;

ARCHITECTURE song_arch OF song IS
	-- 内部信号定义
	SIGNAL ptr1 : INTEGER RANGE 0 TO 239; -- little_star 曲目指针
	SIGNAL ptr2 : INTEGER RANGE 0 TO 181; -- thx 曲目指针
	SIGNAL ptr3 : INTEGER RANGE 0 TO 264;
	SIGNAL mn_former : INTEGER RANGE 0 TO 2 := 0; -- 记录上一乐曲编号, 用于切歌检测

	-- 定义两个乐曲的音符数组
	TYPE pitch_array1 IS ARRAY (0 TO 239) OF INTEGER; -- 曲目 1 的音符数组
	TYPE pitch_array2 IS ARRAY (0 TO 181) OF INTEGER; -- 曲目 2 的音符数组
	TYPE pitch_array3 IS ARRAY (0 TO 255) OF INTEGER; -- 曲目 3 的音符数组

	-- 曲目 1：小星星的音符序列
	CONSTANT little_star : pitch_array1 := (
		1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 6, 6, 6, 6, 0, 6, 6, 6, 6, 0,
		5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0,
		2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0,
		4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0,
		5, 5, 5, 5, 0, 5, 5, 5, 5, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 0,
		2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 5, 5, 5, 5, 0, 5, 5, 5, 5, 0,
		6, 6, 6, 6, 0, 6, 6, 6, 6, 0, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0,
		3, 3, 3, 3, 0, 3, 3, 3, 3, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
	);

	-- 曲目 2：感谢进行曲的音符序列
	CONSTANT thx : pitch_array2 := (
		4, 4, 0, 5, 5, 0, 6, 6, 0, 8, 8, 0, 6, 6, 0, 6, 6, 6, 6, 0, 5, 0, 5, 4, 4, 0, 5, 5, 5, 5,
		0, 4, 4, 0, 2, 2, 0, 4, 4, 0, 5, 5, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 4, 4, 0, 2, 2, 0, 4, 4,
		4, 4, 0, 1, 0, 1, 5, 5, 0, 4, 4, 4, 4, 0, 6, 6, 0, 5, 5, 0, 5, 5, 0, 4, 4, 0, 5, 5, 5, 5,
		0, 4, 4, 0, 5, 5, 0, 6, 6, 0, 8, 8, 0, 6, 6, 0, 6, 6, 6, 6, 0, 5, 0, 5, 4, 4, 0, 5, 5, 5,
		5, 0, 4, 4, 0, 2, 2, 0, 4, 4, 0, 5, 5, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 4, 4, 0, 2, 2, 0, 4,
		4, 4, 4, 0, 1, 0, 1, 5, 5, 0, 4, 4, 4, 4, 0, 6, 6, 0, 5, 5, 0, 5, 5, 0, 2, 2, 0, 4, 4, 4,
		4, 0
	);
	-- 曲目 3：梨花香的音符序列
	CONSTANT pear : pitch_array3 := (
		-- 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 5, 5, 3, 3, 3, 3,
		-- 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 3, 3, 3, 3, 5, 5, 5, 5, 3, 3, 3, 3, 2, 2, 2, 2,
		-- 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0

		4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 8, 8, 8, 8, 
		6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 0, 6, 6, 6, 6, 
		8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 0, 
		2, 2, 2, 2, 1, 1, 2, 2, 4, 4, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 
		5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 
		4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6, 
		5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 6, 6, 6, 6, 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5, 6, 6, 6, 6,
		5, 5, 5, 5, 4, 4, 4, 4, 0, 0, 2, 2, 2, 2, 1, 1, 2, 2, 4, 4, 2, 2, 4, 4, 4, 4, 6, 6, 6, 6,
		5, 5, 5, 5, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0
	);

	-- 8, 8, 8, 8, 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 12, 12, 12, 12, 
	-- 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 8, 0, 10, 10, 
	-- 10, 10, 12, 12, 12, 12, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 
	-- 8, 8, 8, 8, 0, 0, 6, 6, 6, 6, 5, 5, 6, 6, 8, 8, 6, 6, 8, 8, 8, 8, 10, 10, 10, 10, 
	-- 9, 9, 9, 9, 10, 10, 10, 10, 9, 9 ,9, 9, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 0, 0, 8, 8, 8, 8, 
	-- 9, 9, 9, 9, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 12, 12, 12, 12, 10, 10, 10, 10, 
	-- 9, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 0, 10, 10, 10, 10, 12, 12, 12, 12,
	-- 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 0 
	-- 4, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 8, 8, 8, 8, 6, 6, 6, 6,
	-- 5, 5, 5, 5, 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 0, 6, 6, 6, 6, 8, 8, 8, 8, 6, 6, 6, 6, 5, 5, 5, 5,
	-- 6, 6, 6, 6, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 0, 0

BEGIN
	-- 主过程：根据 8Hz 时钟信号和当前乐曲编号输出音符
	PROCESS (clk8hz, music_num)
	BEGIN
		-- 检测乐曲编号是否切换
		IF music_num /= mn_former THEN
			mn_former <= music_num; -- 更新记录的乐曲编号
			ptr1 <= 0; -- 切换曲目后从头开始播放
			ptr2 <= 0;
			ptr3 <= 0;
		ELSE
			-- 在 8Hz 时钟信号的上升沿更新音符指针
			IF rising_edge(clk8hz) THEN
				-- 循环播放曲目 1
				IF ptr1 = 239 THEN
					ptr1 <= 0;
				ELSE
					ptr1 <= ptr1 + 1;
				END IF;
				-- 循环播放曲目 2
				IF ptr2 = 181 THEN
					ptr2 <= 0;
				ELSE
					ptr2 <= ptr2 + 1;
				END IF;
				-- 循环播放曲目 3
				IF ptr3 = 255 THEN
					ptr3 <= 0;
				ELSE
					ptr3 <= ptr3 + 1;
				END IF;
			END IF;

			-- 根据当前乐曲编号选择音符输出
			CASE music_num IS
				WHEN 0 => -- 曲目 1: 小星星
					tone2 <= little_star(ptr1);
				WHEN 1 => -- 曲目 2: 感谢进行曲
					tone2 <= thx(ptr2);
				WHEN 2 => -- 曲目 3: 梨花香
					tone2 <= pear(ptr3);
			END CASE;
		END IF;
	END PROCESS;
END song_arch;